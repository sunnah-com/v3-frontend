// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sunnahcom.api.v1";

export enum Language {
  /** LANGUAGE_UNSPECIFIED - Default unspecified state */
  LANGUAGE_UNSPECIFIED = 0,
  /** LANGUAGE_ENGLISH - English language */
  LANGUAGE_ENGLISH = 1,
  /** LANGUAGE_SPANISH - Spanish language */
  LANGUAGE_SPANISH = 2,
  /** LANGUAGE_FRENCH - French language */
  LANGUAGE_FRENCH = 3,
  /** LANGUAGE_GERMAN - German language */
  LANGUAGE_GERMAN = 4,
  /** LANGUAGE_CHINESE - Chinese language */
  LANGUAGE_CHINESE = 5,
  /** LANGUAGE_RUSSIAN - Russian language */
  LANGUAGE_RUSSIAN = 6,
  /** LANGUAGE_ARABIC - Arabic language */
  LANGUAGE_ARABIC = 7,
  /** LANGUAGE_PORTUGUESE - Portuguese language */
  LANGUAGE_PORTUGUESE = 8,
  /** LANGUAGE_HINDI - Hindi language */
  LANGUAGE_HINDI = 9,
  /** LANGUAGE_JAPANESE - Japanese language */
  LANGUAGE_JAPANESE = 10,
  /** LANGUAGE_KOREAN - Korean language */
  LANGUAGE_KOREAN = 11,
  /** LANGUAGE_ITALIAN - Italian language */
  LANGUAGE_ITALIAN = 12,
  /** LANGUAGE_DUTCH - Dutch language */
  LANGUAGE_DUTCH = 13,
  /** LANGUAGE_SWEDISH - Swedish language */
  LANGUAGE_SWEDISH = 14,
  /** LANGUAGE_TURKISH - Turkish language */
  LANGUAGE_TURKISH = 15,
  /** LANGUAGE_POLISH - Polish language */
  LANGUAGE_POLISH = 16,
  /** LANGUAGE_DANISH - Danish language */
  LANGUAGE_DANISH = 17,
  /** LANGUAGE_NORWEGIAN - Norwegian language */
  LANGUAGE_NORWEGIAN = 18,
  /** LANGUAGE_FINNISH - Finnish language */
  LANGUAGE_FINNISH = 19,
  /** LANGUAGE_CZECH - Czech language */
  LANGUAGE_CZECH = 20,
  /** LANGUAGE_HUNGARIAN - Hungarian language */
  LANGUAGE_HUNGARIAN = 21,
  /** LANGUAGE_ROMANIAN - Romanian language */
  LANGUAGE_ROMANIAN = 22,
  /** LANGUAGE_BULGARIAN - Bulgarian language */
  LANGUAGE_BULGARIAN = 23,
  /** LANGUAGE_CROATIAN - Croatian language */
  LANGUAGE_CROATIAN = 24,
  /** LANGUAGE_SLOVAK - Slovak language */
  LANGUAGE_SLOVAK = 25,
  /** LANGUAGE_SERBIAN - Serbian language */
  LANGUAGE_SERBIAN = 26,
  /** LANGUAGE_SLOVENIAN - Slovenian language */
  LANGUAGE_SLOVENIAN = 27,
  /** LANGUAGE_UKRAINIAN - Ukrainian language */
  LANGUAGE_UKRAINIAN = 28,
  /** LANGUAGE_BASQUE - Basque language */
  LANGUAGE_BASQUE = 29,
  /** LANGUAGE_CATALAN - Catalan language */
  LANGUAGE_CATALAN = 30,
  /** LANGUAGE_WELSH - Welsh language */
  LANGUAGE_WELSH = 31,
  /** LANGUAGE_GREEK - Greek language */
  LANGUAGE_GREEK = 32,
  /** LANGUAGE_THAI - Thai language */
  LANGUAGE_THAI = 33,
  /** LANGUAGE_VIETNAMESE - Vietnamese language */
  LANGUAGE_VIETNAMESE = 34,
  /** LANGUAGE_INDONESIAN - Indonesian language */
  LANGUAGE_INDONESIAN = 35,
  /** LANGUAGE_MALAY - Malay language */
  LANGUAGE_MALAY = 36,
  /** LANGUAGE_FILIPINO - Filipino language */
  LANGUAGE_FILIPINO = 37,
  /** LANGUAGE_SWAHILI - Swahili language */
  LANGUAGE_SWAHILI = 38,
  /** LANGUAGE_TAMIL - Tamil language */
  LANGUAGE_TAMIL = 39,
  /** LANGUAGE_TELUGU - Telugu language */
  LANGUAGE_TELUGU = 40,
  /** LANGUAGE_BENGALI - Bengali language */
  LANGUAGE_BENGALI = 41,
  /** LANGUAGE_PUNJABI - Punjabi language */
  LANGUAGE_PUNJABI = 42,
  /** LANGUAGE_URDU - Urdu language */
  LANGUAGE_URDU = 43,
  /** LANGUAGE_MARATHI - Marathi language */
  LANGUAGE_MARATHI = 44,
  /** LANGUAGE_GUJARATI - Gujarati language */
  LANGUAGE_GUJARATI = 45,
  /** LANGUAGE_KANNADA - Kannada language */
  LANGUAGE_KANNADA = 46,
  /** LANGUAGE_MALAYALAM - Malayalam language */
  LANGUAGE_MALAYALAM = 47,
  /** LANGUAGE_PERSIAN - Persian language */
  LANGUAGE_PERSIAN = 48,
  /** LANGUAGE_HEBREW - Hebrew language */
  LANGUAGE_HEBREW = 49,
  UNRECOGNIZED = -1,
}

export function languageFromJSON(object: any): Language {
  switch (object) {
    case 0:
    case "LANGUAGE_UNSPECIFIED":
      return Language.LANGUAGE_UNSPECIFIED;
    case 1:
    case "LANGUAGE_ENGLISH":
      return Language.LANGUAGE_ENGLISH;
    case 2:
    case "LANGUAGE_SPANISH":
      return Language.LANGUAGE_SPANISH;
    case 3:
    case "LANGUAGE_FRENCH":
      return Language.LANGUAGE_FRENCH;
    case 4:
    case "LANGUAGE_GERMAN":
      return Language.LANGUAGE_GERMAN;
    case 5:
    case "LANGUAGE_CHINESE":
      return Language.LANGUAGE_CHINESE;
    case 6:
    case "LANGUAGE_RUSSIAN":
      return Language.LANGUAGE_RUSSIAN;
    case 7:
    case "LANGUAGE_ARABIC":
      return Language.LANGUAGE_ARABIC;
    case 8:
    case "LANGUAGE_PORTUGUESE":
      return Language.LANGUAGE_PORTUGUESE;
    case 9:
    case "LANGUAGE_HINDI":
      return Language.LANGUAGE_HINDI;
    case 10:
    case "LANGUAGE_JAPANESE":
      return Language.LANGUAGE_JAPANESE;
    case 11:
    case "LANGUAGE_KOREAN":
      return Language.LANGUAGE_KOREAN;
    case 12:
    case "LANGUAGE_ITALIAN":
      return Language.LANGUAGE_ITALIAN;
    case 13:
    case "LANGUAGE_DUTCH":
      return Language.LANGUAGE_DUTCH;
    case 14:
    case "LANGUAGE_SWEDISH":
      return Language.LANGUAGE_SWEDISH;
    case 15:
    case "LANGUAGE_TURKISH":
      return Language.LANGUAGE_TURKISH;
    case 16:
    case "LANGUAGE_POLISH":
      return Language.LANGUAGE_POLISH;
    case 17:
    case "LANGUAGE_DANISH":
      return Language.LANGUAGE_DANISH;
    case 18:
    case "LANGUAGE_NORWEGIAN":
      return Language.LANGUAGE_NORWEGIAN;
    case 19:
    case "LANGUAGE_FINNISH":
      return Language.LANGUAGE_FINNISH;
    case 20:
    case "LANGUAGE_CZECH":
      return Language.LANGUAGE_CZECH;
    case 21:
    case "LANGUAGE_HUNGARIAN":
      return Language.LANGUAGE_HUNGARIAN;
    case 22:
    case "LANGUAGE_ROMANIAN":
      return Language.LANGUAGE_ROMANIAN;
    case 23:
    case "LANGUAGE_BULGARIAN":
      return Language.LANGUAGE_BULGARIAN;
    case 24:
    case "LANGUAGE_CROATIAN":
      return Language.LANGUAGE_CROATIAN;
    case 25:
    case "LANGUAGE_SLOVAK":
      return Language.LANGUAGE_SLOVAK;
    case 26:
    case "LANGUAGE_SERBIAN":
      return Language.LANGUAGE_SERBIAN;
    case 27:
    case "LANGUAGE_SLOVENIAN":
      return Language.LANGUAGE_SLOVENIAN;
    case 28:
    case "LANGUAGE_UKRAINIAN":
      return Language.LANGUAGE_UKRAINIAN;
    case 29:
    case "LANGUAGE_BASQUE":
      return Language.LANGUAGE_BASQUE;
    case 30:
    case "LANGUAGE_CATALAN":
      return Language.LANGUAGE_CATALAN;
    case 31:
    case "LANGUAGE_WELSH":
      return Language.LANGUAGE_WELSH;
    case 32:
    case "LANGUAGE_GREEK":
      return Language.LANGUAGE_GREEK;
    case 33:
    case "LANGUAGE_THAI":
      return Language.LANGUAGE_THAI;
    case 34:
    case "LANGUAGE_VIETNAMESE":
      return Language.LANGUAGE_VIETNAMESE;
    case 35:
    case "LANGUAGE_INDONESIAN":
      return Language.LANGUAGE_INDONESIAN;
    case 36:
    case "LANGUAGE_MALAY":
      return Language.LANGUAGE_MALAY;
    case 37:
    case "LANGUAGE_FILIPINO":
      return Language.LANGUAGE_FILIPINO;
    case 38:
    case "LANGUAGE_SWAHILI":
      return Language.LANGUAGE_SWAHILI;
    case 39:
    case "LANGUAGE_TAMIL":
      return Language.LANGUAGE_TAMIL;
    case 40:
    case "LANGUAGE_TELUGU":
      return Language.LANGUAGE_TELUGU;
    case 41:
    case "LANGUAGE_BENGALI":
      return Language.LANGUAGE_BENGALI;
    case 42:
    case "LANGUAGE_PUNJABI":
      return Language.LANGUAGE_PUNJABI;
    case 43:
    case "LANGUAGE_URDU":
      return Language.LANGUAGE_URDU;
    case 44:
    case "LANGUAGE_MARATHI":
      return Language.LANGUAGE_MARATHI;
    case 45:
    case "LANGUAGE_GUJARATI":
      return Language.LANGUAGE_GUJARATI;
    case 46:
    case "LANGUAGE_KANNADA":
      return Language.LANGUAGE_KANNADA;
    case 47:
    case "LANGUAGE_MALAYALAM":
      return Language.LANGUAGE_MALAYALAM;
    case 48:
    case "LANGUAGE_PERSIAN":
      return Language.LANGUAGE_PERSIAN;
    case 49:
    case "LANGUAGE_HEBREW":
      return Language.LANGUAGE_HEBREW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Language.UNRECOGNIZED;
  }
}

export function languageToJSON(object: Language): string {
  switch (object) {
    case Language.LANGUAGE_UNSPECIFIED:
      return "LANGUAGE_UNSPECIFIED";
    case Language.LANGUAGE_ENGLISH:
      return "LANGUAGE_ENGLISH";
    case Language.LANGUAGE_SPANISH:
      return "LANGUAGE_SPANISH";
    case Language.LANGUAGE_FRENCH:
      return "LANGUAGE_FRENCH";
    case Language.LANGUAGE_GERMAN:
      return "LANGUAGE_GERMAN";
    case Language.LANGUAGE_CHINESE:
      return "LANGUAGE_CHINESE";
    case Language.LANGUAGE_RUSSIAN:
      return "LANGUAGE_RUSSIAN";
    case Language.LANGUAGE_ARABIC:
      return "LANGUAGE_ARABIC";
    case Language.LANGUAGE_PORTUGUESE:
      return "LANGUAGE_PORTUGUESE";
    case Language.LANGUAGE_HINDI:
      return "LANGUAGE_HINDI";
    case Language.LANGUAGE_JAPANESE:
      return "LANGUAGE_JAPANESE";
    case Language.LANGUAGE_KOREAN:
      return "LANGUAGE_KOREAN";
    case Language.LANGUAGE_ITALIAN:
      return "LANGUAGE_ITALIAN";
    case Language.LANGUAGE_DUTCH:
      return "LANGUAGE_DUTCH";
    case Language.LANGUAGE_SWEDISH:
      return "LANGUAGE_SWEDISH";
    case Language.LANGUAGE_TURKISH:
      return "LANGUAGE_TURKISH";
    case Language.LANGUAGE_POLISH:
      return "LANGUAGE_POLISH";
    case Language.LANGUAGE_DANISH:
      return "LANGUAGE_DANISH";
    case Language.LANGUAGE_NORWEGIAN:
      return "LANGUAGE_NORWEGIAN";
    case Language.LANGUAGE_FINNISH:
      return "LANGUAGE_FINNISH";
    case Language.LANGUAGE_CZECH:
      return "LANGUAGE_CZECH";
    case Language.LANGUAGE_HUNGARIAN:
      return "LANGUAGE_HUNGARIAN";
    case Language.LANGUAGE_ROMANIAN:
      return "LANGUAGE_ROMANIAN";
    case Language.LANGUAGE_BULGARIAN:
      return "LANGUAGE_BULGARIAN";
    case Language.LANGUAGE_CROATIAN:
      return "LANGUAGE_CROATIAN";
    case Language.LANGUAGE_SLOVAK:
      return "LANGUAGE_SLOVAK";
    case Language.LANGUAGE_SERBIAN:
      return "LANGUAGE_SERBIAN";
    case Language.LANGUAGE_SLOVENIAN:
      return "LANGUAGE_SLOVENIAN";
    case Language.LANGUAGE_UKRAINIAN:
      return "LANGUAGE_UKRAINIAN";
    case Language.LANGUAGE_BASQUE:
      return "LANGUAGE_BASQUE";
    case Language.LANGUAGE_CATALAN:
      return "LANGUAGE_CATALAN";
    case Language.LANGUAGE_WELSH:
      return "LANGUAGE_WELSH";
    case Language.LANGUAGE_GREEK:
      return "LANGUAGE_GREEK";
    case Language.LANGUAGE_THAI:
      return "LANGUAGE_THAI";
    case Language.LANGUAGE_VIETNAMESE:
      return "LANGUAGE_VIETNAMESE";
    case Language.LANGUAGE_INDONESIAN:
      return "LANGUAGE_INDONESIAN";
    case Language.LANGUAGE_MALAY:
      return "LANGUAGE_MALAY";
    case Language.LANGUAGE_FILIPINO:
      return "LANGUAGE_FILIPINO";
    case Language.LANGUAGE_SWAHILI:
      return "LANGUAGE_SWAHILI";
    case Language.LANGUAGE_TAMIL:
      return "LANGUAGE_TAMIL";
    case Language.LANGUAGE_TELUGU:
      return "LANGUAGE_TELUGU";
    case Language.LANGUAGE_BENGALI:
      return "LANGUAGE_BENGALI";
    case Language.LANGUAGE_PUNJABI:
      return "LANGUAGE_PUNJABI";
    case Language.LANGUAGE_URDU:
      return "LANGUAGE_URDU";
    case Language.LANGUAGE_MARATHI:
      return "LANGUAGE_MARATHI";
    case Language.LANGUAGE_GUJARATI:
      return "LANGUAGE_GUJARATI";
    case Language.LANGUAGE_KANNADA:
      return "LANGUAGE_KANNADA";
    case Language.LANGUAGE_MALAYALAM:
      return "LANGUAGE_MALAYALAM";
    case Language.LANGUAGE_PERSIAN:
      return "LANGUAGE_PERSIAN";
    case Language.LANGUAGE_HEBREW:
      return "LANGUAGE_HEBREW";
    case Language.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UserType {
  /** USER_TYPE_UNSPECIFIED - Default unspecified state */
  USER_TYPE_UNSPECIFIED = 0,
  /** USER_TYPE_REGULAR - Regular user */
  USER_TYPE_REGULAR = 1,
  /** USER_TYPE_ADMIN - Admin user */
  USER_TYPE_ADMIN = 2,
  UNRECOGNIZED = -1,
}

export function userTypeFromJSON(object: any): UserType {
  switch (object) {
    case 0:
    case "USER_TYPE_UNSPECIFIED":
      return UserType.USER_TYPE_UNSPECIFIED;
    case 1:
    case "USER_TYPE_REGULAR":
      return UserType.USER_TYPE_REGULAR;
    case 2:
    case "USER_TYPE_ADMIN":
      return UserType.USER_TYPE_ADMIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserType.UNRECOGNIZED;
  }
}

export function userTypeToJSON(object: UserType): string {
  switch (object) {
    case UserType.USER_TYPE_UNSPECIFIED:
      return "USER_TYPE_UNSPECIFIED";
    case UserType.USER_TYPE_REGULAR:
      return "USER_TYPE_REGULAR";
    case UserType.USER_TYPE_ADMIN:
      return "USER_TYPE_ADMIN";
    case UserType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface User {
  /** Unique identifier for the user */
  id: string;
  /** Display username */
  username: string;
  /** URL to the user's avatar image (optional) */
  avatarUrl: string;
  /** Type of user (regular or admin) */
  userType: UserType;
  /** Email address of the user */
  Email: string;
  /** Whether the user is banned */
  banned: boolean;
}

export interface UserSettings {
  /** Unique identifier for the settings */
  id: string;
  /** ID of the user these settings belong to */
  userId: string;
  /** Whether dark mode is enabled */
  darkMode: boolean;
  /** Whether notifications are enabled */
  notifications: boolean;
  /** Preferred language */
  language: Language;
}

function createBaseUser(): User {
  return { id: "", username: "", avatarUrl: "", userType: 0, Email: "", banned: false };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(26).string(message.avatarUrl);
    }
    if (message.userType !== 0) {
      writer.uint32(32).int32(message.userType);
    }
    if (message.Email !== "") {
      writer.uint32(42).string(message.Email);
    }
    if (message.banned !== false) {
      writer.uint32(48).bool(message.banned);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.Email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.banned = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      userType: isSet(object.userType) ? userTypeFromJSON(object.userType) : 0,
      Email: isSet(object.Email) ? globalThis.String(object.Email) : "",
      banned: isSet(object.banned) ? globalThis.Boolean(object.banned) : false,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.userType !== 0) {
      obj.userType = userTypeToJSON(message.userType);
    }
    if (message.Email !== "") {
      obj.Email = message.Email;
    }
    if (message.banned !== false) {
      obj.banned = message.banned;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.userType = object.userType ?? 0;
    message.Email = object.Email ?? "";
    message.banned = object.banned ?? false;
    return message;
  },
};

function createBaseUserSettings(): UserSettings {
  return { id: "", userId: "", darkMode: false, notifications: false, language: 0 };
}

export const UserSettings: MessageFns<UserSettings> = {
  encode(message: UserSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.darkMode !== false) {
      writer.uint32(24).bool(message.darkMode);
    }
    if (message.notifications !== false) {
      writer.uint32(32).bool(message.notifications);
    }
    if (message.language !== 0) {
      writer.uint32(40).int32(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.darkMode = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.notifications = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.language = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserSettings {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      darkMode: isSet(object.darkMode) ? globalThis.Boolean(object.darkMode) : false,
      notifications: isSet(object.notifications) ? globalThis.Boolean(object.notifications) : false,
      language: isSet(object.language) ? languageFromJSON(object.language) : 0,
    };
  },

  toJSON(message: UserSettings): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.darkMode !== false) {
      obj.darkMode = message.darkMode;
    }
    if (message.notifications !== false) {
      obj.notifications = message.notifications;
    }
    if (message.language !== 0) {
      obj.language = languageToJSON(message.language);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserSettings>, I>>(base?: I): UserSettings {
    return UserSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserSettings>, I>>(object: I): UserSettings {
    const message = createBaseUserSettings();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.darkMode = object.darkMode ?? false;
    message.notifications = object.notifications ?? false;
    message.language = object.language ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
